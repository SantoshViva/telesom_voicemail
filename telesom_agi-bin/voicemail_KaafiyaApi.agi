#!/usr/bin/env php
<?php
//	License for all code of this FreePBX module can be found in the license file inside the module directory
//	  Copyright 2013 Schmooze Com Inc.
//    Copyright (C) 2003 Zac Sprackett <zsprackett-asterisk@sprackett.com>

/* --------WARNING---------
 *
 * This script is auto-copied from an included module and will get overwritten.
 * If you modify it, you must change it to write only, in the agi-bin directory,
 * to keep it from getting changed.
 */

require_once "phpagi.php";
require "api_functions.php";

$AGI = new AGI();
//debug("Checking chat_profile.agi status ", 1);

// Caller ID info is stored in $request in AGI class, passed from Asterisk
$cidnum = $AGI->request['agi_callerid'];
$DID =  get_var($AGI,"DID");
$subcategoryId =  get_var($AGI,"subcategoryId");
$categoryId =  get_var($AGI,"categoryId");

$cidname = $AGI->request['agi_calleridname'];
//log_write( "5", "Opening" );

$aparty = $cidnum;
$bparty = $DID;

//debug("aparty = ".$aparty, 1);
//debug("bparty = ".$bparty, 1);

//log_write("5", "aparty = ".$aparty );
//log_write("5", "bparty = ".$bparty );


//$callback_response = callback($sessionId,$aparty,$bparty,$errorCode,$message,$billsec,$startTime,$endtime,$dtmfInput);
//log_write("5", $callback_response );

$sample_response = kaafiyaprofilequery($aparty,$bparty);

debug("sample_response = ".$sample_response, 1);
//log_write("5", $sample_response );


$audiofile= array();
$sample_response = substr($sample_response,0,-1);

//log_write("5", "second=".$sample_response );
debug("new_sample_response = ".$sample_response, 1);

$fruits_ar = explode(';', $sample_response);
//log_write("5",$fruits_ar);
//log_write("5","encoding start");
$as = json_encode($fruits_ar);
//log_write("5","encoding end");
$arr = json_decode($as, true);
//log_write("5","encoding decoding end=".$arr[0]);

//debug("decode json = ".$arr, 1);

//$total_array_count= count($arr);
//debug("total_array_count = ".$total_array_count, 1);
//$total_songCount= $total_array_count-2;
//debug("total_song_count = ".$total_songCount, 1);

//$dbError= $total_array_count -1;
//$t=$total_songCount/2;
//$t=3;

//debug("TTT = ".$t, 1);
//$AGI->hangup();
$response= new stdClass();
// log_write("5","inside for loop start");
foreach($arr as $key=>$value)
{
//	log_write("5","inside for loop");
	$reponseParam = explode('=', $value);
	if(!strcmp($reponseParam[0],"BALANCE_QUERY_RES.ivrLang"))
    	{
    		$val = preg_replace('/[^a-zA-Z0-9_ -]/s','',$reponseParam[1]);
	        $response->ivrLang=$val;
    	}	
	if(!strcmp($reponseParam[0],"BALANCE_QUERY_RES.subStatus"))
    	{
    		$val = preg_replace('/[^a-zA-Z0-9_ -]/s','',$reponseParam[1]);
	        $response->subStatus=$val;
    	}	
	if(!strcmp($reponseParam[0],"BALANCE_QUERY_RES.ivrLangSet"))
    	{
    		$val = preg_replace('/[^a-zA-Z0-9_ -]/s','',$reponseParam[1]);
	        $response->ivrLangSet=$val;
    	}	
	if(!strcmp($reponseParam[0],"BALANCE_QUERY_RES.sufficientBalance"))
    	{
    		$val = preg_replace('/[^a-zA-Z0-9_ -]/s','',$reponseParam[1]);
		$response->balanceFlag=$val;
//		log_write("5","balanceFlag=".$val);
    	}	
	if(!strcmp($reponseParam[0],"BALANCE_QUERY_RES.dbError"))
    	{
    		$val = preg_replace('/[^a-zA-Z0-9_ -]/s','',$reponseParam[1]);
	        $response->dbError=$val;
    	}	
	if(!strcmp($reponseParam[0],"BALANCE_QUERY_RES.blackList"))
        {
                $val = preg_replace('/[^a-zA-Z0-9_ -]/s','',$reponseParam[1]);
                $response->blackList=$val;
        }

}
//log_write("5", "data =***************" );
$jsonObject= json_encode($response);
$encodeJsonObject=json_decode($jsonObject,true);
$responseDate=$encodeJsonObject['balanceFlag'];
//log_write("5", "data = ".$responseDate );
$Subscriber_status=$encodeJsonObject['balanceFlag'];
//$BlackList_status=$encodeJsonObject['blackList'];
log_write("5", "data = ".$Subscriber_status );
//log_write("5", "BlackList_status = ".$BlackList_status);
$AGI->set_variable('SUBSCRIBER_STATUS',$Subscriber_status);
//$AGI->set_variable('BLACKLIST_STATUS',$BlackList_status);


/*


for ($x = 1; $x <= count($audiofile); $x++) {

$audioPlay = substr($decoded_json[$x]["CRBT_CAT_SUBCAT_RES.songPath"],0,-4);
$intro = "/home/core/cms/upload-dir/".$audioPlay;

//$AGI->set_variable('songId',$decoded_json[$x]["CRBT_CAT_SUBCAT_RES.songId"]);
//$AGI->set_variable('songName',$decoded_json[$x]["CRBT_CAT_SUBCAT_RES.songName"]);
//$AGI->set_variable('songPath',$decoded_json[$x]["CRBT_CAT_SUBCAT_RES.songPath"]);
//       $rd = $AGI->exec('READ', "OPT,".$intro.",1,,1,5");
//	$digits =  get_var($AGI,"OPT");
//	usleep(500);

        $rd = $AGI->get_data($intro, 500000, 1);

//	echo "OPT =>".$OPT;

//	if ($rd['code'] == 200 && $rd['endpos'] > 0) {
        if ($rd['code'] == 200) {
	$digits = $rd["result"];
	}
//	$digits = $rd["result"];

        usleep(500);

/*
        $AGI->set_variable('OPT',$digits);
	usleep(500);
	if($digits == '1'){
	echo "need hangup";
	break;
	}
*/
/*
	if($digits == "2"){
			if($x < count($audiofile)){
			$x= $x+1;
			}			
			else{
	        	$AGI->set_variable('OPT',$digits);
			break;
			}

	}
//*/
/*
	if($digits == '3'){
			if($x <= count($audiofile) && $x != 1){
                        echo "play previous song";
			$x= $x-1;
                        }                       
                        else{
                        echo "may be the first song";
			break;
                        }

        }
*/
/*
        if($digits == "*" or $digits == "#"){
        $AGI->set_variable('OPT',$digits);
	break;
	}



}
*/

//log_write("5", "Complete execution" );


function debug($string, $level=3) {
	global $AGI;
	$AGI->verbose($string, $level);
}

function get_var( $agi, $value) {
        $r = $agi->get_variable( $value );

        if ($r['result'] == 1) {
                $result = $r['data'];
                return $result;
        }
        return '';
}

function log_write($level, $message) {
        global $AGI;
				fwrite($AGI->fp, date("Y-m-d H:i:s") . " [" 
				. $AGI->request['agi_callerid'] 
				. "] (" . $AGI->request['agi_channel'] 
                                . ") (" . $AGI->request['agi_request']
				. ") " . $message . "\n");
	}

?>
